<%--
  Created by IntelliJ IDEA.
  User: al1
  Date: 04.09.14
  Time: 11:18
  To change this template use File | Settings | File Templates.
--%>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!DOCTYPE html>
<html>
<head>
    <%@include file="../includes.jsp" %>
</head>
<body>

<div id="container" class="container-fluid">
    <%@include file="../header.jsp" %>


        <div class="row">

            <!-- tabs -->
            <div class="panel panel-default">
                <div class="panel-body">
                    <%@include file="menu.jsp" %>
                    <div class="col-md-8">
                        <div class="row">

                            <div class="span8">

                    <div class="span8">
                        <h2>Как писать вредоносный <small><strike>быдло</strike></small>код</h2>
                        <hr/>

                        <p>Предлагаю вашему вниманию советы мастеров древности, следование которым создаст дополнительные рабочие места для Java-разработчиков.</p>
                        <p>Код, который вы напишете, будет так сложен в поддержке, что у Джавистов, которые придут после вас, даже простейшее изменение займет годы оплачиваемого труда!</p>
                        <p>Более того, внимательно следуя этим правилам, вы сохраните и своё рабочее место, так как все будут бояться вашего кода и бежать от него…</p>
                        <p>…Впрочем, всему своя мера. Код не должен выглядеть сложным в поддержке — подобное напишет любой дурак. Код должен быть таковым. Иначе это заметят, и код будет переписан с нуля. Вы не можете такого допустить. Эти советы учитывают такую возможность. Да здравствует дзен.</p>
                        <br/>
                        <p>Это вольный пересказ статьи <a href="http://learn.javascript.ru/write-unmain-code">"Как писать неподдерживаемый код"</a></p>
                        <hr/>

                        <h4>Соглашения</h4>
                        <br/>
                        <p>Чтобы помешать другому программисту исправить ваш код, вы должны понять ход его мыслей.</p>
                        <p>Представьте, перед ним — ваш большой класс. И ему нужно поправить его. У него нет ни времени, ни желания, чтобы читать его целиком, а тем более — досконально разбирать. Он хотел бы по-быстрому найти нужное место, сделать изменение и убраться восвояси без появления побочных эффектов.</p>
                        <p>Он рассматривает ваш код как бы через трубочку от туалетной бумаги. Это не даёт ему общей картины, он ищет тот небольшой фрагмент, который ему необходимо изменить. По крайней мере, он надеется, что этот фрагмент будет небольшим.</p>
                        <p><b>На что он попытается опереться в этом поиске — так это на соглашения, принятые в программировании, об именах переменных, названиях функций и методов…</b></p>
                        <p>Как затруднить задачу? Можно везде нарушать соглашения — это помешает ему, но такое могут заметить, и код будет переписан. Как поступил бы ниндзя на вашем месте?</p>
                        <p><b>…Правильно! Следуйте соглашениям «в общем», но иногда — нарушайте их.</b> Тщательно разбросанные по коду нарушения соглашений, с одной стороны, не делают код явно плохим при первом взгляде, а с другой — имеют в точности тот же и даже лучший эффект, чем явное неследование им!</p>
                        <hr/>

                        <h4>Краткость — сестра таланта!</h4>
                        <br/>
                        <p>Пишите «как короче», а не как понятнее. «Меньше букв» — уважительная причина для нарушения любых соглашений.</p>
                        <p>Ваш верный помощник — возможности языка, использованные неочевидным образом.</p>
                        <p>Обратите внимание на тернарный оператор '?', например:</p>


                        <p>i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;</p>
                        <p>Разработчик, встретивший эту строку и попытавшийся понять, чему же всё-таки равно i, скорее всего, придёт к вам за разъяснениями. Смело скажите ему, что короче — это всегда лучше. Посвятите и его в пути ниндзя. Не забудьте вручить Дао дэ цзин.</p>
                        <hr/>

                        <h4>Именование</h4>
                        <br/>
                        <p>Существенную часть науки о создании неподдерживаемого кода - искусство выбора имён.</p>
                        <hr/>

                        <h4>Однобуквенные переменные</h4>
                        <br/>
                        <p>Называйте переменные коротко: a, b или c.</p>
                        <p>В этом случае никто не сможет найти её, используя функцию «Поиск» текстового редактора.</p>
                        <p>Более того, даже найдя — никто не сможет «расшифровать» её и догадаться, что она означает.</p>
                        <hr/>

                        <h4>Не используйте i для цикла</h4>
                        <br/>
                        <p><b>В тех местах, где однобуквенные переменные общеприняты, например, в счетчике цикла — ни в коем случае не используйте стандартные названия i, j, k.</b> Где угодно, только не здесь!</p>
                        <p>Остановите свой взыскательный взгляд на чём-нибудь более экзотическом. Например, x или y. Или более изощрённо, всегда вместо i используйте k (как оригинально!). </p>
                        <p>Эффективность этого подхода особенно заметна, если тело цикла занимает одну-две страницы.</p>
                        <p>В этом случае заметить, что переменная — счетчик цикла, без пролистывания вверх, невозможно.</p>
                        <hr/>

                        <h4>Русские слова и сокращения</h4>
                        <br/>
                        <p>Если вам приходится использовать длинные, понятные имена переменных — что поделать.. Но и здесь есть простор для творчества!</p>
                        <p><b>Назовите переменные «калькой» с русского языка или как-то «улучшите» английское слово.</b></p>
                        <p>В одном месте напишите int zakazy, в другом int zakazi, в третьем int orders, в четвёртом — int odr… Это действительно великолепно работает и очень креативно!</p>
                        <p>Количество ошибок при поддержке такого кода увеличивается во много раз.</p>
                        <hr/>

                        <h4>Будьте абстрактны при выборе имени</h4>
                        <br/>
                        <div class="row">
                            <div class="span8">
                                <blockquote class="pull-right">
                                    <p>Лучший кувшин лепят всю жизнь.</p>
                                    <p>Высокая музыка неподвластна слуху.</p>
                                    <p>Великий образ не имеет формы.</p>
                                    <small>Лао-цзы</small>
                                </blockquote>
                            </div>
                        </div>
                        <div class="row">
                            <div class="span8">
                                <p>При выборе имени старайтесь применить максимально абстрактное слово, например, obj, data, value, item, elem и т.п.</p>
                                <p><b>Идеальное имя для переменной: data.</b> Используйте это имя везде, где можно. В конце концов, каждая переменная содержит данные, не правда ли?</p>
                                <p>Но что делать, если имя data уже занято? Попробуйте value, оно не менее универсально. Ведь каждая переменная содержит значение.</p>
                                <p>Занято и это? Есть и другой вариант.</p>
                                <p><b>Называйте переменную по типу: obj, num, arr…</b></p>
                                <p>Насколько это усложнит разработку? Как ни странно, намного!</p>
                                <p>Казалось бы, название переменной содержит информацию, говорит о том, что в переменной — число, объект или массив… <b>С другой стороны, когда непосвящённый будет разбирать этот код — он с удивлением обнаружит, что информации нет!</b></p>
                                <p>Ведь как раз тип легко понять, запустив отладчик и посмотрев, что внутри. Но в чём смысл этой переменной? Что за массив/объект/число в ней хранится? Без долгой медитации над кодом тут не обойтись!</p>
                                <p><b>Что делать, если и эти имена кончились? Просто добавьте цифру:</b> item1, item2, elem5, data1..</p>
                            </div>
                        </div>
                        <hr/>

                        <h4>Похожие имена</h4>
                        <br/>
                        <p>Только истинно внимательный программист достоин понять ваш код. Но как проверить, достоин ли читающий?</p>
                        <p><b>Один из способов — использовать похожие имена переменных, например, data и date.</b> Бегло прочитать такой код почти невозможно. А уж заметить опечатку и поправить её… Ммммм… Мы здесь надолго, время попить чайку.</p>
                        <hr/>

                        <h4>А.К.Р.О.Н.И.М</h4>
                        <br/>
                        <p><b>Используйте сокращения, чтобы сделать код короче.</b> Например se (Sub Element), mc (Money Counter) и другие. Если вы обнаружите, что путаетесь в них сами — героически страдайте, но не переписывайте код. Вы знали, на что шли.</p>
                        <hr/>

                        <h4>Хитрые синонимы</h4>
                        <br/>
                        <div class="row">
                            <div class="span8">
                                <blockquote class="pull-right">
                                    <p>Очень трудно найти чёрную кошку в тёмной комнате, особенно когда её там нет.</p>
                                    <small>Конфуций</small>
                                </blockquote>
                            </div>
                        </div>
                        <div class="row">
                            <div class="span8">
                                <p><b>Чтобы было не скучно — используйте похожие названия для обозначения одинаковых действий.</b></p>
                                <p>Например, если метод показывает что-то на экране — начните его название с display.. (скажем, displayElement), а в другом месте объявите аналогичный метод как show.. (showFrame).</p>
                                <p><b>Как бы намекните этим, что существует тонкое различие между способами показа в этих методах, хотя на самом деле его нет.</b></p>
                                <p>По возможности, договоритесь с членами своей команды. Если Вася в своих классах использует display.., то Валера — обязательно render.., а Петя — paint...</p>
                                <p><b>…И напротив, если есть две функции с важными отличиями — используйте одно и то же слово для их описания!</b> Например, с print... можно начать метод печати на принтере printPage, а также — метод добавления текста на страницу printText.</p>
                                <p>А теперь, пусть читающий код думает: «Куда же выводит сообщение printMessage?». Особый шик — добавить элемент неожиданности. Пусть printMessage выводит не туда, куда все, а в файл.</p>
                            </div>
                        </div>
                        <hr/>

                        <h4>Словарь терминов — это фигня!</h4>
                        <br/>
                        <p>Ни в коем случае не поддавайтесь требованиям написать словарь терминов для проекта. Если же он уже есть — не следуйте ему!</p>
                        <p>Пусть читающий ваш код программист напрасно ищет различия в helloUser и welcomeVisitor и пытается понять, когда что использовать. Вы-то знаете, что на самом деле различий нет, но искать их можно о-очень долго.</p>
                        <p><b>Для обозначения посетителя в одном месте используйте user, а в другом visitor, в третьем — просто u. Выбирайте одно имя или другое, в зависимости от функции и настроения.</b></p>
                        <p>Это воплотит сразу два ключевых принципа ниндзя-дизайна — сокрытие информации и подмена понятий!</p>
                        <hr/>

                        <h4>Повторно используйте имена</h4>
                        <br/>
                        <p><b>По возможности, повторно используйте имена переменных, функций и свойств. Просто записывайте в них новые значения.</b> Добавляйте новое имя, только если это абсолютно необходимо.</p>
                        <p>В методе старайтесь обойтись только теми переменными, которые были переданы как параметры.</p>
                        <p>Это не только затруднит идентификацию того, что сейчас находится в переменной, но и сделает почти невозможным поиск места, в котором конкретное значение было присвоено.</p>
                        <p>Цель — максимально усложнить отладку и заставить читающего код программиста построчно анализировать код и конспектировать изменения переменных для каждой ветки исполнения.</p>
                        <p><b>Продвинутый вариант этого подхода — незаметно (!) подменить переменную на нечто похожее, например:</b><br/></p>
                        <code><br/>
                        1 void ninjaMethod(Object elem) {<br/>

                        2  // 20 строк кода, работающего с elem <br/>

                        3 <br/>
                        4  elem = elem.clone();<br/>

                        5 <br/>

                        6 // еще 20 строк кода, работающего с elem <br/>

                        7 }
                        </code>
                        <br/>
                        <p>Программист, пожелавший добавить действия с elem во вторую часть метода, будет удивлён. Лишь во время отладки, посмотрев весь код, он с удивлением обнаружит, что оказывается имел дело с клоном!</p>
                        <p>Регулярные встречи с этим приемом на практике говорят: защититься невозможно. Эффективно даже против опытного ниндзи.</p>
                        <hr/>

                        <h4>Покажите вашу любовь к разработке</h4>
                        <br/>
                        <p>Пусть все видят, какими замечательными сущностями вы оперируете! Имена superElement, megaFrame и niceItem при благоприятном положении звёзд могут привести к просветлению читающего.</p>
                        <p>Действительно, с одной стороны, кое-что написано: super.., mega.., nice.. С другой — это не несёт никакой конкретики. Читающий может решить поискать в этом глубинный смысл и замедитировать на часок-другой оплаченного рабочего времени.</p>
                        <hr/>

                        <h4>Перекрывайте внешние переменные</h4>
                        <br/>
                        <div class="row">
                            <div class="span8">
                                <blockquote class="pull-right">
                                    <p>Находясь на свету, нельзя ничего увидеть в темноте.</p>
                                    <p>Пребывая же в темноте, увидишь все, что находится на свету.</p>
                                    <small>Гуань Инь-цзы</small>
                                </blockquote>
                            </div>
                        </div>
                        <div class="row">
                            <div class="span8">
                                <p>Почему бы не использовать одинаковые переменные внутри и снаружи метода? Это просто и не требует придумывать новых имён.</p>
                                <code><br/>
                                1                                 User user = authenticateUser();<br/>

                                2                                  <br/>

                                3                                void render() {<br/>

                                4                                  User user = ...<br/>

                                5                                  ...<br/>

                                6                                  ...<br/>

                                7                                  ... // <-- программист захочет внести исправления сюда, и..<br/>

                                8                                  ...<br/>

                                9                                }<br/>
                                </code>
                                <p>Зашедший в середину метода render программист, скорее всего, не заметит, что переменная user «уже не та» и использует её… Ловушка захлопнулась! Здравствуй, отладчик.</p>
                            </div>
                        </div>
                        <hr/>


                        <h4>Мощные методы!</h4>
                        <br/>
                        <p><b>Не ограничивайте действия меода тем, что написано в его названии.</b> Будьте шире.</p>
                        <p>Например, метод validateEmail(String email) может, кроме проверки e-mail на правильность, выводить сообщение об ошибке и просить заново ввести e-mail.</p>
                        <p><b>Выберите хотя бы пару дополнительных действий, кроме основного назначения метода.</b> Главное — они должны быть неочевидны из названия метода. Истинный ниндзя-девелопер сделает так, что они будут неочевидны и из кода тоже.</p>
                        <p><b>Объединение нескольких смежных действий в один метод защитит ваш код от повторного использования.</b></p>
                        <p>Представьте, что другому разработчику нужно только проверить адрес, а сообщение — не выводить. Ваш метод validateEmail(String email), который делает и то, и другое, ему не подойдёт. Работодатель будет вынужден оплатить создание нового.</p>
                        <hr/>

                        <h4>Внимание.. Сюр-при-из!</h4>
                        <br/>
                        <p>Есть методы, название которых говорит о том, что они ничего не меняют. Например, isReady, checkPermission, findTags.. В трактатах это называется «отсутствие сторонних эффектов».</p>
                        <p><b>По-настоящему красивый приём — делать в таких методах что-нибудь полезное, заодно с процессом проверки. Что именно — совершенно неважно.</b></p>
                        <p>Удивление и ошеломление, которое возникнет у вашего коллеги, когда он увидит, что метод с названием на is.., check.. или find... что-то меняет — несомненно, расширит его границы разумного!</p>
                        <p><b>Ещё одна вариация такого подхода — возвращать нестандартное значение.</b></p>
                        <p>Ведь общеизвестно, что is.. и check.. обычно возвращают true/false. Продемонстрируйте оригинальное мышление. Пусть вызов checkPermission возвращает не результат true/false, а объект с результатами проверки! А что, полезно.</p>
                        <p>Те же, кто попытается написать проверку if (checkPermission(..)), будут удивлены результатом. Ответьте им: «надо читать документацию!». И перешлите эту статью.</p>
                        <hr/>

                        <h4>Заключение</h4>
                        <br/>
                        <p>Все советы выше пришли из реального кода… И в том числе от разработчиков с большим опытом.</p>
                        <p>Возможно, даже больше вашего, так что не судите опрометчиво.</p>
                        <ul>
                            <li><p>Следуйте нескольким из них — и ваш код станет полон сюрпризов.</p></li>
                            <li><p>Следуйте многим — и ваш код станет истинно вашим, никто не захочет изменять его.</p></li>
                            <li><p>Следуйте всем — и ваш код станет ценным уроком для молодых разработчиков, ищущих просветления.</p></li>
                        </ul>
                        <hr/>
                        Олесь Крижановский
                    </div>
                </div>

                <br/>

            </div>

        </div>
        <!-- tabs -->


    </div>

    <footer id="footer"></footer>
</div>

</body>
</html>

